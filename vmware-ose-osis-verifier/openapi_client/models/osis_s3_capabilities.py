# coding: utf-8

"""
    Object Storage Interoperability Services API

    This is VMware Cloud Director Object Storage Interoperability Services API. Once storage platform vendor implements REST APIs complying with this specification, Object Storage Extension can integrate with the platform without coding effort.

    The version of the OpenAPI document: 1.0.0-oas3
    Contact: wachen@vmware.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from openapi_client.models.osis_s3_capabilities_exclusions_value import OsisS3CapabilitiesExclusionsValue
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OsisS3Capabilities(BaseModel):
    """
    OsisS3Capabilities
    """ # noqa: E501
    exclusions: Optional[Dict[str, OsisS3CapabilitiesExclusionsValue]] = Field(default=None, description="The S3 API code which is not supported by the storage platform. The API code complies with https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketEncryption.html.")
    __properties: ClassVar[List[str]] = ["exclusions"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OsisS3Capabilities from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in exclusions (dict)
        _field_dict = {}
        if self.exclusions:
            for _key in self.exclusions:
                if self.exclusions[_key]:
                    _field_dict[_key] = self.exclusions[_key].to_dict()
            _dict['exclusions'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OsisS3Capabilities from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exclusions": dict(
                (_k, OsisS3CapabilitiesExclusionsValue.from_dict(_v))
                for _k, _v in obj.get("exclusions").items()
            )
            if obj.get("exclusions") is not None
            else None
        })
        return _obj


