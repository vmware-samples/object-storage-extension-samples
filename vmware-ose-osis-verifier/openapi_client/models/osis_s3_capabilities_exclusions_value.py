# coding: utf-8

"""
    Object Storage Interoperability Services API

    This is VMware Cloud Director Object Storage Interoperability Services API. Once storage platform vendor implements REST APIs complying with this specification, Object Storage Extension can integrate with the platform without coding effort.

    The version of the OpenAPI document: 1.0.0-oas3
    Contact: wachen@vmware.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OsisS3CapabilitiesExclusionsValue(BaseModel):
    """
    OsisS3CapabilitiesExclusionsValue
    """ # noqa: E501
    all: Optional[StrictBool] = Field(default=False, description="Indicates whether this API is completely not supported. True means that the api is completely not supported. False means that a) the api is partial supported if any of by_params, by_headers and by_payload are defined, or b) the api is completely not supported if none of by_params, by_headers and by_payload are defined. ")
    by_params: Optional[List[StrictStr]] = Field(default=None, description="The URL parameters not supported for specific S3 API.")
    by_headers: Optional[List[StrictStr]] = Field(default=None, description="The HTTP headers not supported for specific S3 API.")
    by_payload: Optional[List[StrictStr]] = Field(default=None, description="The request properties not supported for specific S3 API.")
    __properties: ClassVar[List[str]] = ["all", "by_params", "by_headers", "by_payload"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OsisS3CapabilitiesExclusionsValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OsisS3CapabilitiesExclusionsValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "all": obj.get("all") if obj.get("all") is not None else False,
            "by_params": obj.get("by_params"),
            "by_headers": obj.get("by_headers"),
            "by_payload": obj.get("by_payload")
        })
        return _obj


