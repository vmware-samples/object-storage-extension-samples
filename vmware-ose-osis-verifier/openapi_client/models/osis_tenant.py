# coding: utf-8

"""
    Object Storage Interoperability Services API

    This is VMware Cloud Director Object Storage Interoperability Services API. Once storage platform vendor implements REST APIs complying with this specification, Object Storage Extension can integrate with the platform without coding effort.

    The version of the OpenAPI document: 1.0.0-oas3
    Contact: wachen@vmware.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OsisTenant(BaseModel):
    """
    OsisTenant
    """ # noqa: E501
    name: StrictStr = Field(description="The suggested name of platform tenant; typically it is the VCD tenant name. If platform cannot adopt the this name, it is okay to use any string as platform tenant name. The identity of VCD and platform tenant are cd_tenant_id and tenant_id. Maintaining a record of tenant_id, cd_tenant_id and name in OSIS adaptor will make all work.")
    active: Optional[StrictBool] = Field(default=None, description="The status of platform tenant. For the platforms not supporting activate/deactivate tenant, either returning active=true or not returning active indicates the platform tenant is in active status.")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The ID of platform tenant. The property is absent in tenant creation request, and is mandatory in the tenant creation response.")
    cd_tenant_ids: Optional[List[StrictStr]] = Field(default=None, description="The ID of VCD tenants.")
    __properties: ClassVar[List[str]] = ["name", "active", "tenant_id", "cd_tenant_ids"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OsisTenant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OsisTenant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "active": obj.get("active"),
            "tenant_id": obj.get("tenant_id"),
            "cd_tenant_ids": obj.get("cd_tenant_ids")
        })
        return _obj


