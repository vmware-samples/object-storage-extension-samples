# coding: utf-8

"""
    Object Storage Interoperability Services API

    This is VMware Cloud Director Object Storage Interoperability Services API. Once storage platform vendor implements REST APIs complying with this specification, Object Storage Extension can integrate with the platform without coding effort.

    The version of the OpenAPI document: 1.0.0-oas3
    Contact: wachen@vmware.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OsisS3Credential(BaseModel):
    """
    OsisS3Credential
    """ # noqa: E501
    access_key: StrictStr = Field(description="The S3 access key.")
    secret_key: StrictStr = Field(description="The S3 secret key.")
    active: Optional[StrictBool] = Field(default=None, description="The status of platform S3 key. For the platforms not supporting activate/deactivate S3 key, either returning active=true or not returning active indicates the platform S3 key is in active status.")
    creation_date: Optional[datetime] = Field(default=None, description="S3 credential creation date.")
    tenant_id: StrictStr = Field(description="The ID of the tenant which the S3 credential belongs to.")
    user_id: StrictStr = Field(description="The ID of the user which the S3 credential belongs to.")
    username: Optional[StrictStr] = Field(default=None, description="The name of the platform user which the S3 credential belongs to.")
    cd_user_id: StrictStr = Field(description="The ID of VCD user.")
    cd_tenant_id: StrictStr = Field(description="The ID of VCD tenant which the user belongs to.")
    __properties: ClassVar[List[str]] = ["access_key", "secret_key", "active", "creation_date", "tenant_id", "user_id", "username", "cd_user_id", "cd_tenant_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OsisS3Credential from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OsisS3Credential from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_key": obj.get("access_key"),
            "secret_key": obj.get("secret_key"),
            "active": obj.get("active"),
            "creation_date": obj.get("creation_date"),
            "tenant_id": obj.get("tenant_id"),
            "user_id": obj.get("user_id"),
            "username": obj.get("username"),
            "cd_user_id": obj.get("cd_user_id"),
            "cd_tenant_id": obj.get("cd_tenant_id")
        })
        return _obj


