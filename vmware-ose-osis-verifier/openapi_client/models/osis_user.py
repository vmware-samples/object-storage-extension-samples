# coding: utf-8

"""
    Object Storage Interoperability Services API

    This is VMware Cloud Director Object Storage Interoperability Services API. Once storage platform vendor implements REST APIs complying with this specification, Object Storage Extension can integrate with the platform without coding effort.

    The version of the OpenAPI document: 1.0.0-oas3
    Contact: wachen@vmware.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OsisUser(BaseModel):
    """
    OsisUser
    """ # noqa: E501
    user_id: Optional[StrictStr] = Field(default=None, description="The ID of platform user. The property is absent in user creation request, and is mandatory in the user creation response.")
    canonical_user_id: Optional[StrictStr] = Field(default=None, description="The canonical ID of platform user. The property is absent in user creation request, and is mandatory in the user creation response.")
    user_arn: Optional[StrictStr] = Field(default=None, description="The arn of platform user.")
    tenant_id: StrictStr = Field(description="The ID of the platform tenant which the platform user belongs to.")
    active: Optional[StrictBool] = Field(default=None, description="The status of platform user. For the platforms not supporting activate/deactivate user, either returning active=true or not returning active indicates the platform user is in active status.")
    username: Optional[StrictStr] = Field(default=None, description="The platform username mapped with VCD user.")
    email: Optional[StrictStr] = Field(default=None, description="The user email of the VCD user.")
    role: Optional[StrictStr] = Field(default=None, description="user role")
    cd_user_id: StrictStr = Field(description="The ID of the VCD user.")
    cd_tenant_id: StrictStr = Field(description="The ID of the VCD tenant.")
    __properties: ClassVar[List[str]] = ["user_id", "canonical_user_id", "user_arn", "tenant_id", "active", "username", "email", "role", "cd_user_id", "cd_tenant_id"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROVIDER_ADMIN', 'TENANT_ADMIN', 'TENANT_USER', 'ANONYMOUS', 'UNKNOWN']):
            raise ValueError("must be one of enum values ('PROVIDER_ADMIN', 'TENANT_ADMIN', 'TENANT_USER', 'ANONYMOUS', 'UNKNOWN')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OsisUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OsisUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user_id": obj.get("user_id"),
            "canonical_user_id": obj.get("canonical_user_id"),
            "user_arn": obj.get("user_arn"),
            "tenant_id": obj.get("tenant_id"),
            "active": obj.get("active"),
            "username": obj.get("username"),
            "email": obj.get("email"),
            "role": obj.get("role"),
            "cd_user_id": obj.get("cd_user_id"),
            "cd_tenant_id": obj.get("cd_tenant_id")
        })
        return _obj


