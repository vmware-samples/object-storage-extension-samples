# coding: utf-8

"""
    Object Storage Interoperability Services API

    This is VMware Cloud Director Object Storage Interoperability Services API. Once storage platform vendor implements REST APIs complying with this specification, Object Storage Extension can integrate with the platform without coding effort.

    The version of the OpenAPI document: 1.0.0-oas3
    Contact: wachen@vmware.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Information(BaseModel):
    """
    Information
    """ # noqa: E501
    platform_name: StrictStr = Field(description="Name of the storage platform.")
    platform_version: Optional[StrictStr] = Field(default=None, description="Version of the storage platform.")
    api_version: StrictStr = Field(description="OSIS version the REST services complying with.")
    iam: Optional[StrictBool] = Field(default=None, description="The OSIS adaptor is using Amazon fashion IAM for user mapping.")
    logo_uri: Optional[StrictStr] = Field(default=None, description="URI of the platform logo so that OSE can use it on UI.")
    status: StrictStr
    auth_modes: Optional[List[StrictStr]] = None
    services: Optional[Dict[str, StrictStr]] = Field(default=None, description="Supported Services' URL of the storage platform")
    regions: Optional[List[StrictStr]] = None
    storage_classes: Optional[List[StrictStr]] = None
    not_implemented: List[StrictStr] = Field(description="The operation id array of optional OSIS APIs which is not implemented.")
    __properties: ClassVar[List[str]] = ["platform_name", "platform_version", "api_version", "iam", "logo_uri", "status", "auth_modes", "services", "regions", "storage_classes", "not_implemented"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['NORMAL', 'WARNING', 'ERROR', 'UNKNOWN']):
            raise ValueError("must be one of enum values ('NORMAL', 'WARNING', 'ERROR', 'UNKNOWN')")
        return value

    @field_validator('auth_modes')
    def auth_modes_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Basic', 'Bearer']):
                raise ValueError("each list item must be one of ('Basic', 'Bearer')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Information from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Information from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "platform_name": obj.get("platform_name"),
            "platform_version": obj.get("platform_version"),
            "api_version": obj.get("api_version"),
            "iam": obj.get("iam"),
            "logo_uri": obj.get("logo_uri"),
            "status": obj.get("status"),
            "auth_modes": obj.get("auth_modes"),
            "services": obj.get("services"),
            "regions": obj.get("regions"),
            "storage_classes": obj.get("storage_classes"),
            "not_implemented": obj.get("not_implemented")
        })
        return _obj


